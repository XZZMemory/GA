from random import choice
import math


def te():
    user = 8
    userList = []
    for user in range(user):
        userList.append(user)
    print(userList)
    pop = choice(userList)
    print("移除的元素是：" + str(pop))
    userList.remove(pop)
    print("移除元素后的list是：" + str(userList))

    # print(userList.pop())

    fruits = {"apple", "banana", "cherry"}

    print(fruits.pop())

    print(fruits)
    configPath = './config1.txt'
    print("读取配置文件")


def processing(configPath):
    times = 1
    with open(configPath) as file_object:
        for line in file_object:
            if times == 1:
                locationOfBaseList = eval(line)
                print(str(locationOfBaseList))
            elif times == 2:
                locationOfUserList = eval(line)
                print(str(locationOfUserList))
            elif times == 3:
                VN = eval(line)
                print(str(VN))
            times = times + 1


def getAns():
    sumOfUser = 7
    sumOfChannels = 25
    sumOfBase = 7
    C = [[19, 11, 23, 18, 7, 19, 18, 19, 23, 10, 11, 18, 0, 25, 15, 11, 2, 19, 20, 18, 20, 19, 5, 29, 24],
         [29, 0, 0, 0, 3, 0, 3, 0, 0, 3, 10, 10, 10, 29, 10, -1, 10, 0, 3, 0, 0, 10, 10, 10, 0],
         [6, -1, 6, 4, -1, 6, 22, 4, 6, 22, 4, 4, 4, 4, 8, 8, 22, 8, 6, 6, 22, 6, 22, 6, 6],
         [19, 19, 28, 19, 28, 4, -1, -1, 14, 3, 14, 4, 14, 28, 3, 28, 28, 4, 14, 3, 14, 14, 3, 14, 4],
         [15, 22, 22, 24, 22, 15, 22, 15, 15, 22, 15, 24, 24, 24, 22, 22, -1, 15, 15, -1, 22, -1, 24, 15, 22],
         [10, 9, 12, 9, 10, 7, 7, 12, 9, 7, 12, 24, 24, -1, 12, 24, 9, 9, 12, 7, 10, 23, 9, 10, 7],
         [16, 27, 16, 16, 16, -1, 28, 29, 29, 16, 27, 29, 28, 27, 27, 28, 29, 16, 29, 28, 28, 27, 16, 16, 27]]
    asm_array = [
        [0.04181006105547116, 0.007556370012956676, 2.6457718399205498e-05, 0.002432388806603304, 0.8850383662665657,
         0.015510330692231568, 0.001873095877112964, 0.03071429865492886, 0.00018321963540565136, 0.03695728642902757,
         0.001988315980799124, 0.016043277504102803, 0.03649641580073771, 0.48070057641164965, 0.03370758162710878,
         0.0005021066917305513, 0.06811980806469188, 0.010346557066658308, 0.024033977596748562, 0.9699089020187269,
         0.007586584449048061, 0.892294753116268, 0.08320517984140241, 0.004685301064681901, 0.014691177862111694],
        [2.1129920428805602e-05, 0.9135627706449082, 0.9393179955853519, 0.9673090626209135, 0.9939555740287871,
         0.9436794283832322, 0.9988235841112142, 0.9437908448059439, 0.8605646469380406, 0.9987219346463269,
         8.385514827504479e-09, 2.892968010012451e-10, 1.1403761103858003e-09, 0.0010262231033578337,
         9.378835236791337e-12, 0, 9.17320891104751e-09, 0.9546499908349205, 0.9966181031674366, 0.8361997577425314,
         0.9802737660401524, 2.0759861846817583e-08, 1.578301200315126e-09, 2.578028758111138e-13, 0.9668461068588676],
        [0.944730544847386, 0, 0.9701970295952845, 8.840271237390405e-05, 0, 0.9547414917701683, 3.9351501502945784e-10,
         1.1782466615156456e-05, 0.617207013586538, 1.50635394224522e-08, 1.3902563442437665e-05, 7.419647347918433e-05,
         2.4039189941370505e-05, 2.7549210582362278e-05, 0.9894289779941823, 0.9862250726541095, 1.2176017513293155e-10,
         0.5577857079187614, 0.9448884613762364, 0.9243000534815399, 8.933277499111333e-14, 0.7336345366235143,
         1.4602964531633195e-12, 0.972333525617472, 0.9204623891436008],
        [1.6665579973130111e-06, 1.5142942967541102e-07, 5.21505244107322e-10, 2.879696486242773e-05,
         1.205705912379128e-09, 6.88791850760838e-08, 0, 0, 0.9876791653535939, 2.763173866740314e-11,
         0.9934342401337286, 1.2425384876542595e-10, 0.9968124698302299, 9.723676318452693e-08, 2.796229621078971e-10,
         3.8222406597386927e-07, 3.395049619289854e-09, 1.4708511593692313e-09, 0.9869260132158633,
         1.3760230560663378e-12, 0.9850442712523321, 0.9875631029495413, 6.380772019099255e-09, 0.9892684561456173,
         1.930329751489035e-09],
        [0.9251086978785358, 0.00020979553460466566, 0.00018488484173105458, 3.012493639951327e-06,
         0.0007378429178084051, 0.9581604875806927, 0.0011426189000293687, 0.9488481302104078, 0.7173597100060756,
         0.00018495093150781432, 0.9678985583081564, 1.1073424710900138e-05, 7.765472842138215e-09,
         0.0033988791790199846, 0.010192562228926056, 3.341173780798284e-05, 0, 0.98017544335713, 0.9742622883592301, 0,
         0.00032735243651085664, 0, 9.15690745350817e-05, 0.9626453106650235, 4.851541456998009e-05],
        [9.440910472198929e-09, 3.444413366407839e-05, 8.746085571135538e-08, 3.253286005905772e-11,
         1.3997242207600903e-07, 5.3862175766631365e-09, 5.6828181827996695e-09, 1.0068086925689586e-06,
         8.860628446601836e-13, 3.0676607153978163e-12, 3.010660365830908e-11, 0.9452894388968048, 0.9666787460256476,
         0, 1.2932453618336463e-17, 0.9897749606271599, 1.864940346589444e-13, 1.590983069733877e-11,
         3.2804524522155706e-08, 2.610899423339977e-10, 1.0050163989414158e-06, 0.9999310852949043,
         2.885510338990697e-16, 1.698834935259864e-08, 1.329646634689429e-09],
        [4.2297083554865053e-14, 0.9366047292082376, 1.8056784550992435e-14, 8.638750548035759e-12,
         1.6644330267226058e-12, 0, 0.9507243392982304, 0.9861790456213518, 0.9904305561557323, 3.1137254606064375e-12,
         0.9884500629289478, 0.8439099229199073, 0.9428963976665277, 0.7783882617884349, 0.9307906798684306,
         0.8992782457327554, 0.9864206117388933, 4.272018853543694e-12, 0.9571855027491286, 0.30564775780328385,
         0.8961970359990072, 0.9955040410409577, 3.4974388551800517e-14, 2.5886949934955267e-11, 0.9887529025869536]]
    print(len(asm_array))
    print(len(asm_array[0]))
    # 得到用户与每个基站进行通信时的链路可靠性，根据每个信道的可靠性，self.C
    ansArray = []
    for user in range(sumOfUser):
        ansArray.append([])
        ans = 1
        for base in range(sumOfBase):
            ansEachBase = 1
            for channe in range(sumOfChannels):
                if C[base][channe] == user:
                    ansEachChannel = 1 - asm_array[base][channe]
                    ansEachBase *= ansEachChannel
            ansArray[user].append(ans - ansEachBase)
    print(ansArray)


# getAns()
i = float('inf')
if float('inf') < i:
    print("xaioyu")
elif float('inf') > i:
    print("大于")
else:
    print("dengyu")
a = 4
a -= 5
print(a)
ss = 0.038836753579833884 * 1000 * ((696) ** (-4))
print("ss: " + str(ss))
